import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group 'com.agenda.appointments'
version '1.0-SNAPSHOT'

dependencies {
    implementation project(':services')
}

def tasksList = []

def functionsDir = file('src/main/java/com/agenda/appointments/functions')

if (!functionsDir.exists() || !functionsDir.isDirectory()) {
    throw new GradleException("Not found directory")
}

functionsDir.eachFile { file ->
    def fileName = file.name.replaceAll(/\.java$/, '')
    def taskName = "shadowJar${fileName}"

    println "[$taskName]: task created"

    tasks.create(name: taskName,type: ShadowJar) {
        archiveBaseName.set(file.name.toLowerCase())
        archiveClassifier.set('')
        archiveVersion.set('')
        from sourceSets.main.output
        configurations = [project.configurations.runtimeClasspath]

        manifest {
            attributes(
                    'Main-Class': "com.agenda.appointments.functions.${fileName}"
            )
        }
    }

    artifacts {
        archives tasks.named(taskName)
    }

    tasksList.add(taskName)
}

task buildAllShadowJars {
    dependsOn tasksList.collect { functionName ->
        tasks.named(functionName)
    }
}

build.dependsOn buildAllShadowJars

tasksList.clear()


